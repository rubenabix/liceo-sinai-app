/**
 * Modules
 */
var assert = require('assert')
var gulp = require('gulp')
var fs = require('fs')
var inline = require('..')

/**
 * Vars
 */
var base = 'test/fixtures'

describe('gulp-inline', function() {
  it('should inline a stylesheet',
    io('css'))

  it('should inline a script',
    io('js'))

  it.only('should inline SVG',
    io('svg'))

  it('should inline an image',
    io('img'))

  it('should inline a basic template',
    io('basic'))

  it('should work with inline event listeners',
    io('inline-events'))

  it('should not automatically create unnecessary html entities',
    io('apostrophe'))

  it('should not duplicate css',
    io('duplicate-css'))

  it('should inline using relative paths when src not absolute',
    io('relative', 'basic-output'))
})


/**
 * Curried version of inputOutput
 */
function io(actual, expected) {
  return function(done) {
    return inputOutput(actual, expected, done)
  }
}

/**
 * Check that gulp-inline converts `input`
 * into `output` (specified as fixture names)
 */
function inputOutput(input, output, done) {
  if(output === undefined)
    output = input + '-output'

  gulp.src(fixture(input))
    .pipe(inline({base: base}))
    .on('data', function(file) {
      var actual = String(file.contents)
      var expected = fs.readFileSync(fixture(output), 'utf8')

      assert.equal(actual, expected)
      done()
    })
}

function fixture(name) {
  return base + '/' + name + '.html'
}